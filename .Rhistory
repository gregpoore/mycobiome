#      metaQiitaCombined_Nonzero_8cancer_GenusShared,
#      rep200FungiSpeciesShared_8cancer_Nonzero,
#      metaQiitaCombined_Nonzero_8cancer_SpeciesShared,
#      file = "Interim_data/data_tcga_8_cancers_features_matched_to_weizmann_29Mar22.RData")
#-----------------------------------------#
# Intersect presence/absence per CT at genus level
# DIFFERENCE FROM ABOVE IS THAT THE FOLLOWING CODE
# USES SAMPLES FROM ***ALL*** SEQUENCING PLATFORMS
#-----------------------------------------#
# psFungiHiSeqFungi_Paired2Wz_genus_shared
# psFungiHiSeqFungi_Paired2Wz_species_shared
rep200FungiAllSeqPlatformsGenusShared <- data.frame(t(otu_table(psFungiHiSeqFungi_Paired2Wz_genus_shared)))
rep200FungiAllSeqPlatformsSpeciesShared <- psFungiHiSeqFungi_Paired2Wz_species_shared
rep200FungiAllSeqPlatformsSpeciesShared[1:3,1:3]
metaQiitaCombined_Nonzero_AllSeqPlatforms_8cancer_shared <- metaQiitaWGS_RNA_AllSeqPlatforms_Joined_WithBamcounts %>%
filter(investigation %in% c("TCGA-BRCA","TCGA-LUAD","TCGA-LUSC","TCGA-SKCM","TCGA-COAD","TCGA-READ","TCGA-GBM","TCGA-PAAD","TCGA-OV","TCGA-SARC")) %>%
droplevels()
dim(metaQiitaCombined_Nonzero_AllSeqPlatforms_8cancer_shared) # 6234   43
metaQiitaCombined_Nonzero_AllSeqPlatforms_8cancer_shared$disease_type <- as.character(metaQiitaCombined_Nonzero_AllSeqPlatforms_8cancer_shared$disease_type)
metaQiitaCombined_Nonzero_AllSeqPlatforms_8cancer_shared$disease_type[metaQiitaCombined_Nonzero_AllSeqPlatforms_8cancer_shared$disease_type == "Lung Squamous Cell Carcinoma"] <- "Lung Cancer"
metaQiitaCombined_Nonzero_AllSeqPlatforms_8cancer_shared$disease_type[metaQiitaCombined_Nonzero_AllSeqPlatforms_8cancer_shared$disease_type == "Lung Adenocarcinoma"] <- "Lung Cancer"
metaQiitaCombined_Nonzero_AllSeqPlatforms_8cancer_shared$disease_type[metaQiitaCombined_Nonzero_AllSeqPlatforms_8cancer_shared$disease_type == "Colon Adenocarcinoma"] <- "Colorectal Cancer"
metaQiitaCombined_Nonzero_AllSeqPlatforms_8cancer_shared$disease_type[metaQiitaCombined_Nonzero_AllSeqPlatforms_8cancer_shared$disease_type == "Rectum Adenocarcinoma"] <- "Colorectal Cancer"
metaQiitaCombined_Nonzero_AllSeqPlatforms_8cancer_shared$disease_type[metaQiitaCombined_Nonzero_AllSeqPlatforms_8cancer_shared$disease_type == "Breast Invasive Carcinoma"] <- "Breast Cancer"
metaQiitaCombined_Nonzero_AllSeqPlatforms_8cancer_shared$disease_type[metaQiitaCombined_Nonzero_AllSeqPlatforms_8cancer_shared$disease_type == "Glioblastoma Multiforme"] <- "Glioblastoma"
metaQiitaCombined_Nonzero_AllSeqPlatforms_8cancer_shared$disease_type[metaQiitaCombined_Nonzero_AllSeqPlatforms_8cancer_shared$disease_type == "Pancreatic Adenocarcinoma"] <- "Pancreatic Cancer"
metaQiitaCombined_Nonzero_AllSeqPlatforms_8cancer_shared$disease_type[metaQiitaCombined_Nonzero_AllSeqPlatforms_8cancer_shared$disease_type == "Ovarian Serous Cystadenocarcinoma"] <- "Ovarian Cancer"
metaQiitaCombined_Nonzero_AllSeqPlatforms_8cancer_shared$disease_type[metaQiitaCombined_Nonzero_AllSeqPlatforms_8cancer_shared$disease_type == "Skin Cutaneous Melanoma"] <- "Melanoma"
metaQiitaCombined_Nonzero_AllSeqPlatforms_8cancer_shared$disease_type[metaQiitaCombined_Nonzero_AllSeqPlatforms_8cancer_shared$disease_type == "Sarcoma"] <- "Bone Cancer"
table(metaQiitaCombined_Nonzero_AllSeqPlatforms_8cancer_shared$disease_type)
## TCGA data
rep200FungiAllSeqPlatformsGenusShared_8cancer <- rep200FungiAllSeqPlatformsGenusShared[rownames(metaQiitaCombined_Nonzero_AllSeqPlatforms_8cancer_shared),]
rep200FungiAllSeqPlatformsSpeciesShared_8cancer <- rep200FungiAllSeqPlatformsSpeciesShared[rownames(metaQiitaCombined_Nonzero_AllSeqPlatforms_8cancer_shared),]
dim(rep200FungiAllSeqPlatformsGenusShared_8cancer) # 6234   54
dim(rep200FungiAllSeqPlatformsSpeciesShared_8cancer) # 6234   34
## After subsetting features, remove samples with 0 counts. Note that the metadata will have to be subset as well
# Genus
rep200FungiAllSeqPlatformsGenusShared_8cancer_Nonzero <- rep200FungiAllSeqPlatformsGenusShared_8cancer[rowSums(rep200FungiAllSeqPlatformsGenusShared_8cancer) != 0,]
metaQiitaCombined_Nonzero_AllSeqPlatforms_8cancer_GenusShared <- droplevels(metaQiitaCombined_Nonzero_AllSeqPlatforms_8cancer_shared[rowSums(rep200FungiAllSeqPlatformsGenusShared_8cancer) != 0,])
# Species
rep200FungiAllSeqPlatformsSpeciesShared_8cancer_Nonzero <- rep200FungiAllSeqPlatformsSpeciesShared_8cancer[rowSums(rep200FungiAllSeqPlatformsSpeciesShared_8cancer) != 0,]
metaQiitaCombined_Nonzero_AllSeqPlatforms_8cancer_SpeciesShared <- droplevels(metaQiitaCombined_Nonzero_AllSeqPlatforms_8cancer_shared[rowSums(rep200FungiAllSeqPlatformsSpeciesShared_8cancer) != 0,])
# Load full EukDetect markers and filter to fungi only
# Load filtered and unfiltered tables; remove []; and filter to fungi only
# Find overlap between filtered and unfiltered fungi --> save
#------------------Analyze tax tables------------------#
## Load full EukDetect markers and identify genera
eukDetectMarkers <- read.csv("EukDetect/tables/eukdetect_marker_genes_per_species.csv", stringsAsFactors = FALSE)
eukDetectMarkersFungi <- eukDetectMarkers %>% filter(Group == "Fungi") %>% droplevels()
eukDetectMarkersFungi$Genus <- sapply(strsplit(eukDetectMarkersFungi$Species,"_"), `[`, 1)
## Load filtered and unfiltered taxonomy tables from running EukDetect on TCGA non-human data
eukDetectTCGAFilteredTax <- read.csv("EukDetect/tables/filtered_taxonomy.tsv", sep = "\t", stringsAsFactors = FALSE)
colnames(eukDetectTCGAFilteredTax)[1] <- "OTU_ID"
eukDetectTCGAFilteredTax$Taxonomy <- gsub("\\[|\\]","",eukDetectTCGAFilteredTax$Taxonomy)
eukDetectTCGAFilteredTax$Genus <- sapply(strsplit(eukDetectTCGAFilteredTax$Taxonomy," "), `[`, 1)
eukDetectTCGAUnfilteredTax <- read.csv("EukDetect/tables/not_filtered_taxonomy.tsv", sep = "\t", stringsAsFactors = FALSE)
colnames(eukDetectTCGAUnfilteredTax)[1] <- "OTU_ID"
eukDetectTCGAUnfilteredTax$Taxonomy <- gsub("\\[|\\]","",eukDetectTCGAUnfilteredTax$Taxonomy)
eukDetectTCGAUnfilteredTax$Genus <- sapply(strsplit(eukDetectTCGAUnfilteredTax$Taxonomy," "), `[`, 1)
# Identify and fix the "unclassified" genera (not an issue above)
eukDetectTCGAUnfilteredTax[which(eukDetectTCGAUnfilteredTax$Genus == "unclassified"),]
eukDetectTCGAUnfilteredTax$Genus[111] <- "Penicillium"
eukDetectTCGAUnfilteredTax$Genus[137] <- "Aspergillus"
## Subset to fungi only
eukDetectTCGAFilteredTaxFungi <- eukDetectTCGAFilteredTax %>%
filter(Genus %in% eukDetectMarkersFungi$Genus) %>% droplevels()
eukDetectTCGAUnfilteredTaxFungi <- eukDetectTCGAUnfilteredTax %>%
filter(Genus %in% eukDetectMarkersFungi$Genus) %>% droplevels()
eukDetectTCGAFilteredTaxFungi %>%
write.csv("EukDetect/tables/eukDetectTCGAFilteredTaxFungi.csv", row.names = FALSE)
eukDetectTCGAUnfilteredTaxFungi %>%
write.csv("EukDetect/tables/eukDetectTCGAUnfilteredTaxFungi.csv", row.names = FALSE)
#------------------Intersect tax tables with rep200 and TCGA------------------#
## Compare full marker list with rep200
# Note: For simplicity, the first two words separated by "_" are used to match taxonomy names
# Note: Use rep200TaxSplit_Fungi_Paired_to_Weizmann object for rep200 tax table
eukDetectMarkersFungiSpecies1 <- sapply(strsplit(eukDetectMarkersFungi$Species,"_"), `[`, 1)
eukDetectMarkersFungiSpecies2<- sapply(strsplit(eukDetectMarkersFungi$Species,"_"), `[`, 2)
eukDetectMarkersFungi$Tax_Reformatted <- paste0(eukDetectMarkersFungiSpecies1, "_",
eukDetectMarkersFungiSpecies2)
sum(rep200TaxSplit_Fungi_Paired_to_Weizmann$species %in% eukDetectMarkersFungi$Tax_Reformatted) # 295
sum(eukDetectMarkersFungi$Tax_Reformatted %in% rep200TaxSplit_Fungi_Paired_to_Weizmann$species) # 295
# The following object defines the maximum possible similarity
intersect_rep200_eukdetect_fungi <- intersect(rep200TaxSplit_Fungi_Paired_to_Weizmann$species,
eukDetectMarkersFungi$Tax_Reformatted)
eukDetectTCGAFilteredTaxFungiReformatted <- read.csv("EukDetect/tables/eukDetectTCGAFilteredTaxFungi_Reformatted_1Apr22.csv",
stringsAsFactors = FALSE)
eukDetectTCGAFilteredTaxFungiReformatted$Species_Hit <- ifelse(grepl("_",eukDetectTCGAFilteredTaxFungiReformatted$Tax_Reformatted),
yes = TRUE, no = FALSE)
eukDetectTCGAUnfilteredTaxFungiReformatted <- read.csv("EukDetect/tables/eukDetectTCGAUnfilteredTaxFungi_Reformatted_1Apr22.csv",
stringsAsFactors = FALSE)
eukDetectTCGAUnfilteredTaxFungiReformatted$Species_Hit <- ifelse(grepl("_",eukDetectTCGAUnfilteredTaxFungiReformatted$Tax_Reformatted),
yes = TRUE, no = FALSE)
sum(rep200TaxSplit_Fungi_Paired_to_Weizmann$species %in% eukDetectTCGAFilteredTaxFungiReformatted$Tax_Reformatted) # 22
sum(eukDetectTCGAFilteredTaxFungiReformatted$Tax_Reformatted %in% rep200TaxSplit_Fungi_Paired_to_Weizmann$species) # 22
sum(rep200TaxSplit_Fungi_Paired_to_Weizmann$species %in% eukDetectTCGAUnfilteredTaxFungiReformatted$Tax_Reformatted) # 42
sum(eukDetectTCGAUnfilteredTaxFungiReformatted$Tax_Reformatted %in% rep200TaxSplit_Fungi_Paired_to_Weizmann$species) # 42
## Intersect species with filtered and unfiltered tax tables
# Filtered
sharedSpeciesEukDetectFiltered <- list(intersectedOGUs = rownames(rep200TaxSplit_Fungi_Paired_to_Weizmann)[which(rep200TaxSplit_Fungi_Paired_to_Weizmann$species %in% eukDetectTCGAFilteredTaxFungiReformatted$Tax_Reformatted)],
intersectedTaxa = intersect(eukDetectTCGAFilteredTaxFungiReformatted$Tax_Reformatted,
rep200TaxSplit_Fungi_Paired_to_Weizmann$species))
sharedGenusEukDetectFiltered <- list(intersectedOGUs = rownames(rep200TaxSplit_Fungi_Paired_to_Weizmann)[which(rep200TaxSplit_Fungi_Paired_to_Weizmann$genus %in% eukDetectTCGAFilteredTaxFungiReformatted$Genus)],
intersectedTaxa = intersect(eukDetectTCGAFilteredTaxFungiReformatted$Genus,
rep200TaxSplit_Fungi_Paired_to_Weizmann$genus))
# Unfiltered
sharedSpeciesEukDetectUnfiltered <- list(intersectedOGUs = rownames(rep200TaxSplit_Fungi_Paired_to_Weizmann)[which(rep200TaxSplit_Fungi_Paired_to_Weizmann$species %in% eukDetectTCGAUnfilteredTaxFungiReformatted$Tax_Reformatted)],
intersectedTaxa = intersect(eukDetectTCGAUnfilteredTaxFungiReformatted$Tax_Reformatted,
rep200TaxSplit_Fungi_Paired_to_Weizmann$species))
sharedGenusEukDetectUnfiltered <- list(intersectedOGUs = rownames(rep200TaxSplit_Fungi_Paired_to_Weizmann)[which(rep200TaxSplit_Fungi_Paired_to_Weizmann$genus %in% eukDetectTCGAUnfilteredTaxFungiReformatted$Genus)],
intersectedTaxa = intersect(eukDetectTCGAUnfilteredTaxFungiReformatted$Genus,
rep200TaxSplit_Fungi_Paired_to_Weizmann$genus))
#------------------Fisher exact tests------------------#
## Fisher exact test for WIS enrichment
# Filtered
wisSpecies <- unique(colnames(weizmannSpecies))
sum(wisSpecies %in% eukDetectTCGAFilteredTaxFungiReformatted$Tax_Reformatted) # 13
sum(eukDetectMarkersFungi$Taxonomy_ID %in% eukDetectTCGAFilteredTaxFungiReformatted$OTU_ID) # 53
eukDetectFilteredWISFisher
eukDetectFilteredWISFisher <- data.frame(EukDetectPos = c(18, 35), EukDetectNeg = c(273, 1684),
row.names = c("WIS_pos","WIS_neg"), stringsAsFactors = FALSE)
eukDetectFilteredWISFisher
fisher.test(eukDetectFilteredWISFisher)
## Fisher exact test for high coverage enrichment
coverageFungiAllSamples <- read.csv("Input_data/fungi_filt_updated_29Sep21_coverage_all_wgs_and_rna_output.csv", stringsAsFactors = FALSE)
coverageFungiAllSamples$strain <- gsub("\\[|\\]","",coverageFungiAllSamples$strain)
coverageFungiAllSamples$strain <- gsub(" ","_",coverageFungiAllSamples$strain)
coverageFungiAllSamples_1Percent <- coverageFungiAllSamples %>% filter(coverage_ratio >= 0.01)
coverageFungiAllSamples_LessPercent <- coverageFungiAllSamples %>% filter(coverage_ratio < 0.01)
# Filtered
sum(coverageFungiAllSamples_1Percent$strain %in% eukDetectTCGAFilteredTaxFungiReformatted$Tax_Reformatted) # 14
sum(!(coverageFungiAllSamples_1Percent$strain %in% eukDetectTCGAFilteredTaxFungiReformatted$Tax_Reformatted)) # 17
sum(coverageFungiAllSamples_LessPercent$strain %in% eukDetectTCGAFilteredTaxFungiReformatted$Tax_Reformatted) # 8
sum(!(coverageFungiAllSamples_LessPercent$strain %in% eukDetectTCGAFilteredTaxFungiReformatted$Tax_Reformatted)) # 280
highCovEukDetectFilteredFisher <- data.frame(HighCov = c(14, 17), LowCov = c(8, 280),
row.names = c("EukDetect_Pos","EukDetect_neg"), stringsAsFactors = FALSE)
highCovEukDetectFilteredFisher
fisher.test(highCovEukDetectFilteredFisher)
metaQiitaCombined_Nonzero_DecontamV2 %>% filter(sample_type == "Primary Tumor") %>% select(data_submitting_center_label) %>% table()
table(metaQiitaCombined_Nonzero_DecontamV2$sample_tpe)
table(metaQiitaCombined_Nonzero_DecontamV2$sample_type)
metaQiitaCombined_Nonzero_DecontamV2 %>% filter(sample_type == "Blood Derived Normal") %>% select(data_submitting_center_label) %>% table()
library(nlme)
library(DAAG)
install.packages("DAAG")
library(DAAG)
library(viridisLite)
scidat<-na.omit(science) scidat$like<-scidat$like+rnorm(n = length(scidat$like),mean = mean(scidat$like), sd = sd(scidat$like))
scidat<-na.omit(science)
scidat$like<-scidat$like+rnorm(n = length(scidat$like),mean = mean(scidat$like), sd = sd(scidat$like))
fit1<-lme(fixed = like ~ sex + PrivPub ,           random = ~1|State/school/Class,           data = scidat)
summary(fit1)
library(ggbeeswarm)
install.packages("ggbeeswarm")
library(ggbeeswarm)
ggplot(data = scidat,aes(x = PrivPub, y = like, fill = sex))+
scale_fill_viridis_d( option = "D")+
geom_violin(alpha=0.5, position = position_dodge(width = .75),size=1,color=NA) +
geom_boxplot(notch = TRUE,  outlier.size = -1, color="black",lwd=1, alpha = 0.7,show.legend = F)+
# geom_point( shape = 21,size=2, position = position_jitterdodge(), color="black",alpha=1)+
ggbeeswarm::geom_quasirandom(shape = 21,size=2, dodge.width = .75, color="black",alpha=.5,show.legend = F)+
theme_minimal()+
ylab(  c("How much do they like science?")  )  +
xlab(  c("Type of school")  )  +
rremove("legend.title")+
theme(#panel.border = element_rect(colour = "black", fill=NA, size=2),
axis.line = element_line(colour = "black",size=1),
axis.ticks = element_line(size=1,color="black"),
axis.text = element_text(color="black"),
axis.ticks.length=unit(0.2,"cm"),
legend.position = c(0.95, 0.85))+
font("xylab",size=15)+
font("xy",size=15)+
font("xy.text", size = 15) +
font("legend.text",size = 15)+
guides(fill = guide_legend(override.aes = list(alpha = 1,color="black")))
#----------------------------------------------------------#
# Load environments
#----------------------------------------------------------#
require(doMC)
require(plyr)
require(dplyr)
require(phyloseq)
require(microbiome)
require(vegan)
require(biomformat)
require(rhdf5)
require(ggpubr)
require(ggsci)
require(scales)
numCores <- detectCores()
registerDoMC(cores=numCores)
#----------------------------------------------------------#
# Import data
#----------------------------------------------------------#
# load("Interim_data/snmDataFungi_13Sep21.RData") # To load the metaQiitaWGS_RNA_AllSeqPlatforms_Joined object
load("Interim_data/metaQiitaWGS_RNA_AllSeqPlatforms_Joined_25Mar22.RData")
idxstats <- read.csv("Input_data/cgc_idxstats_mycobiome_all_total_reads_gdp_29Sep21.csv", stringsAsFactors = FALSE, row.names = 1)
#----------------------------------------------------------#
# Rep200 fungal species identification
#----------------------------------------------------------#
rep200TaxSplit <- read.csv("Supporting_data/rep200_lineage_map_split.csv", stringsAsFactors = FALSE, row.names = 1)
rep200Kingdoms <- read.csv("Supporting_data/rep200_gOTU_kingdom_mapping.csv", stringsAsFactors = FALSE)
rep200Kingdoms_Fungi <- rep200Kingdoms[which(rep200Kingdoms$kingdom == "fungi"),]
rep200Kingdoms_Bacteria <- rep200Kingdoms[which(rep200Kingdoms$kingdom == "bacteria"),]
rep200TaxSplit_Fungi <- rep200TaxSplit[rownames(rep200TaxSplit) %in% rep200Kingdoms_Fungi$genomeID,,drop=FALSE]
dim(rep200TaxSplit_Fungi) # 320   7
rep200TaxSplit_Bacteria <- rep200TaxSplit[rownames(rep200TaxSplit) %in% rep200Kingdoms_Bacteria$genomeID,,drop=FALSE]
dim(rep200TaxSplit_Bacteria) # 11080     7
fungiOGUs <- rownames(rep200TaxSplit_Fungi)
bacteriaOGUs <- rownames(rep200TaxSplit_Bacteria)
#----------------------------------------------------------#
# Remerge WGS and RNA-Seq data while retaining bacteria and fungal data
#----------------------------------------------------------#
#-----------------------Import WGS rep200 data-----------------------#
## Import metadata and read count data
rep200Data_WGS_BIOM <- read_biom(biom_file = "Input_data/Qiita_results/rep200_TCGA_WGS_OGU_25Mar22.biom")
rep200Data_WGS <- t(as(biom_data(rep200Data_WGS_BIOM), "matrix"))
rownames(rep200Data_WGS) <- gsub("^11[0-9]+\\.","",rownames(rep200Data_WGS))
dim(rep200Data_WGS) # 4736 11585
# Check rowname overlap and subset metadata
sum(rownames(rep200Data_WGS) %in% rownames(metaQiitaWGS_RNA_AllSeqPlatforms_Joined)) # 4736
sum(rownames(metaQiitaWGS_RNA_AllSeqPlatforms_Joined) %in% rownames(rep200Data_WGS)) # 4736
metaQiitaWGS_RNA_AllSeqPlatforms_Joined_WGS <- metaQiitaWGS_RNA_AllSeqPlatforms_Joined %>% filter(experimental_strategy == "WGS") %>% droplevels()
rep200Data_WGS_Matched <- rep200Data_WGS[rownames(metaQiitaWGS_RNA_AllSeqPlatforms_Joined_WGS),]
dim(rep200Data_WGS_Matched) # 4736 11585
#-----------------------Import RNA rep200 data-----------------------#
rep200Data_RNA_BIOM <- read_biom(biom_file = "Input_data/Qiita_results/rep200_TCGA_RNA_OGU_25Mar22.biom")
rep200Data_RNA <- t(as(biom_data(rep200Data_RNA_BIOM), "matrix"))
rownames(rep200Data_RNA) <- gsub("^11[0-9]+\\.","",rownames(rep200Data_RNA)) # Qiita IDs get appended to name; this removes them
dim(rep200Data_RNA) # 10776 11735
# Check rowname overlap and subset metadata
sum(rownames(rep200Data_RNA) %in% rownames(metaQiitaWGS_RNA_AllSeqPlatforms_Joined)) # 10776
sum(rownames(metaQiitaWGS_RNA_AllSeqPlatforms_Joined) %in% rownames(rep200Data_RNA)) # 10776
metaQiitaWGS_RNA_AllSeqPlatforms_Joined_RNA <- metaQiitaWGS_RNA_AllSeqPlatforms_Joined %>% filter(experimental_strategy == "RNA-Seq") %>% droplevels()
rep200Data_RNA_Matched <- rep200Data_RNA[rownames(metaQiitaWGS_RNA_AllSeqPlatforms_Joined_RNA),]
dim(rep200Data_RNA_Matched) # 10776 11735
#-----------------------Combine WGS and RNA rep200 data-----------------------#
sum(colnames(rep200Data_WGS_Matched) %in% colnames(rep200Data_RNA_Matched)) # 11526
rep200Data_WGS_MatchedDf <- rep200Data_WGS_Matched %>% data.frame() %>% rownames_to_column("sampleID")
rep200Data_RNA_MatchedDf <- rep200Data_RNA_Matched %>% data.frame() %>% rownames_to_column("sampleID")
rep200Data_WGS_RNA_Matched <- plyr::rbind.fill(rep200Data_WGS_MatchedDf, rep200Data_RNA_MatchedDf) %>% column_to_rownames("sampleID")
rep200Data_WGS_RNA_Matched[is.na(rep200Data_WGS_RNA_Matched)] <- 0 # rbind.fill places NAs for missing entries; replace them with 0
dim(rep200Data_WGS_RNA_Matched) # 15512 11794
## Save "rep200Data_WGS_RNA_Matched" as phyloseq table for later use
psmetaQiitaWGS_RNA_AllSeqPlatforms_Joined <- metaQiitaWGS_RNA_AllSeqPlatforms_Joined
psmetaQiitaWGS_RNA_AllSeqPlatforms_Joined$library_size <- rowSums(rep200Data_WGS_RNA_Matched)
psmetaQiitaWGS_RNA_AllSeqPlatforms_Joined$library_size_log10 <- log10(psmetaQiitaWGS_RNA_AllSeqPlatforms_Joined$library_size)
psRep200All <- phyloseq(otu_table(rep200Data_WGS_RNA_Matched, taxa_are_rows = FALSE),
tax_table(as.matrix(rep200TaxSplit)), sample_data(psmetaQiitaWGS_RNA_AllSeqPlatforms_Joined))
# save(psRep200All, fungiOGUs, bacteriaOGUs,
#      file = "Interim_data/phyloseq_tcga_rep200_all_OGUs_25Mar25.RData")
## Find bacterial and fungal OGUs
bacteria_fungi_OGUs <- c(rownames(rep200TaxSplit_Fungi), rownames(rep200TaxSplit_Bacteria))
rep200Data_WGS_RNA_Matched_Filt <- rep200Data_WGS_RNA_Matched[,colnames(rep200Data_WGS_RNA_Matched) %in% bacteria_fungi_OGUs]
dim(rep200Data_WGS_RNA_Matched_Filt) # 15512 11390
rep200Data_WGS_RNA_Matched_Bacteria <- rep200Data_WGS_RNA_Matched[,colnames(rep200Data_WGS_RNA_Matched) %in% rownames(rep200TaxSplit_Bacteria)]
dim(rep200Data_WGS_RNA_Matched_Bacteria) # 15512 11071
rep200Data_WGS_RNA_Matched_Fungi <- rep200Data_WGS_RNA_Matched[,colnames(rep200Data_WGS_RNA_Matched) %in% rownames(rep200TaxSplit_Fungi)]
dim(rep200Data_WGS_RNA_Matched_Fungi) # 15512 319
#----------------------------------------------------------#
# Construct phyloseq object and summarize counts to domain level
#----------------------------------------------------------#
psRep200BacteriaFungi <- phyloseq(otu_table(rep200Data_WGS_RNA_Matched_Filt, taxa_are_rows = FALSE),
tax_table(as.matrix(rep200TaxSplit)), sample_data(metaQiitaWGS_RNA_AllSeqPlatforms_Joined))
# Separate into various subsets
psRep200BacteriaFungi_PT <- subset_samples(psRep200BacteriaFungi, sample_type == "Primary Tumor")
psRep200BacteriaFungi_PT_WGS <- subset_samples(psRep200BacteriaFungi_PT, experimental_strategy == "WGS")
psRep200BacteriaFungi_PT_RNA <- subset_samples(psRep200BacteriaFungi_PT, experimental_strategy == "RNA-Seq")
#-----------------------Aggregate counts to domain level-----------------------#
# Note that k__Bacteria = bacteria and k__Eukaryota = fungi
psRep200BacteriaFungi_domain = aggregate_taxa(psRep200BacteriaFungi, "Domain")
psRep200BacteriaFungi_PT_domain = aggregate_taxa(psRep200BacteriaFungi_PT, "Domain")
psRep200BacteriaFungi_PT_WGS_domain = aggregate_taxa(psRep200BacteriaFungi_PT_WGS, "Domain")
psRep200BacteriaFungi_PT_RNA_domain = aggregate_taxa(psRep200BacteriaFungi_PT_RNA, "Domain")
setwd("/Volumes/GoogleDrive/My Drive/AAA_UCSD_Research/AAA_Knight_Lab/AAA_Projects/AAA_Atlas_Cancer_Microbiome/AAA_Code_for_Mycobiome_Analyses")
#----------------------------------------------------------#
# Load environments
#----------------------------------------------------------#
require(doMC)
require(plyr)
require(dplyr)
require(phyloseq)
require(microbiome)
require(vegan)
require(biomformat)
require(rhdf5)
require(ggpubr)
require(ggsci)
require(scales)
numCores <- detectCores()
registerDoMC(cores=numCores)
#----------------------------------------------------------#
# Import data
#----------------------------------------------------------#
# load("Interim_data/snmDataFungi_13Sep21.RData") # To load the metaQiitaWGS_RNA_AllSeqPlatforms_Joined object
load("Interim_data/metaQiitaWGS_RNA_AllSeqPlatforms_Joined_25Mar22.RData")
idxstats <- read.csv("Input_data/cgc_idxstats_mycobiome_all_total_reads_gdp_29Sep21.csv", stringsAsFactors = FALSE, row.names = 1)
#----------------------------------------------------------#
# Rep200 fungal species identification
#----------------------------------------------------------#
rep200TaxSplit <- read.csv("Supporting_data/rep200_lineage_map_split.csv", stringsAsFactors = FALSE, row.names = 1)
rep200Kingdoms <- read.csv("Supporting_data/rep200_gOTU_kingdom_mapping.csv", stringsAsFactors = FALSE)
rep200Kingdoms_Fungi <- rep200Kingdoms[which(rep200Kingdoms$kingdom == "fungi"),]
rep200Kingdoms_Bacteria <- rep200Kingdoms[which(rep200Kingdoms$kingdom == "bacteria"),]
rep200TaxSplit_Fungi <- rep200TaxSplit[rownames(rep200TaxSplit) %in% rep200Kingdoms_Fungi$genomeID,,drop=FALSE]
dim(rep200TaxSplit_Fungi) # 320   7
rep200TaxSplit_Bacteria <- rep200TaxSplit[rownames(rep200TaxSplit) %in% rep200Kingdoms_Bacteria$genomeID,,drop=FALSE]
dim(rep200TaxSplit_Bacteria) # 11080     7
fungiOGUs <- rownames(rep200TaxSplit_Fungi)
bacteriaOGUs <- rownames(rep200TaxSplit_Bacteria)
#----------------------------------------------------------#
# Remerge WGS and RNA-Seq data while retaining bacteria and fungal data
#----------------------------------------------------------#
#-----------------------Import WGS rep200 data-----------------------#
## Import metadata and read count data
rep200Data_WGS_BIOM <- read_biom(biom_file = "Input_data/Qiita_results/rep200_TCGA_WGS_OGU_25Mar22.biom")
rep200Data_WGS <- t(as(biom_data(rep200Data_WGS_BIOM), "matrix"))
rownames(rep200Data_WGS) <- gsub("^11[0-9]+\\.","",rownames(rep200Data_WGS))
dim(rep200Data_WGS) # 4736 11585
# Check rowname overlap and subset metadata
sum(rownames(rep200Data_WGS) %in% rownames(metaQiitaWGS_RNA_AllSeqPlatforms_Joined)) # 4736
sum(rownames(metaQiitaWGS_RNA_AllSeqPlatforms_Joined) %in% rownames(rep200Data_WGS)) # 4736
metaQiitaWGS_RNA_AllSeqPlatforms_Joined_WGS <- metaQiitaWGS_RNA_AllSeqPlatforms_Joined %>% filter(experimental_strategy == "WGS") %>% droplevels()
rep200Data_WGS_Matched <- rep200Data_WGS[rownames(metaQiitaWGS_RNA_AllSeqPlatforms_Joined_WGS),]
dim(rep200Data_WGS_Matched) # 4736 11585
#-----------------------Import RNA rep200 data-----------------------#
rep200Data_RNA_BIOM <- read_biom(biom_file = "Input_data/Qiita_results/rep200_TCGA_RNA_OGU_25Mar22.biom")
rep200Data_RNA <- t(as(biom_data(rep200Data_RNA_BIOM), "matrix"))
rownames(rep200Data_RNA) <- gsub("^11[0-9]+\\.","",rownames(rep200Data_RNA)) # Qiita IDs get appended to name; this removes them
dim(rep200Data_RNA) # 10776 11735
# Check rowname overlap and subset metadata
sum(rownames(rep200Data_RNA) %in% rownames(metaQiitaWGS_RNA_AllSeqPlatforms_Joined)) # 10776
sum(rownames(metaQiitaWGS_RNA_AllSeqPlatforms_Joined) %in% rownames(rep200Data_RNA)) # 10776
metaQiitaWGS_RNA_AllSeqPlatforms_Joined_RNA <- metaQiitaWGS_RNA_AllSeqPlatforms_Joined %>% filter(experimental_strategy == "RNA-Seq") %>% droplevels()
rep200Data_RNA_Matched <- rep200Data_RNA[rownames(metaQiitaWGS_RNA_AllSeqPlatforms_Joined_RNA),]
dim(rep200Data_RNA_Matched) # 10776 11735
#-----------------------Combine WGS and RNA rep200 data-----------------------#
sum(colnames(rep200Data_WGS_Matched) %in% colnames(rep200Data_RNA_Matched)) # 11526
rep200Data_WGS_MatchedDf <- rep200Data_WGS_Matched %>% data.frame() %>% rownames_to_column("sampleID")
rep200Data_RNA_MatchedDf <- rep200Data_RNA_Matched %>% data.frame() %>% rownames_to_column("sampleID")
rep200Data_WGS_RNA_Matched <- plyr::rbind.fill(rep200Data_WGS_MatchedDf, rep200Data_RNA_MatchedDf) %>% column_to_rownames("sampleID")
rep200Data_WGS_RNA_Matched[is.na(rep200Data_WGS_RNA_Matched)] <- 0 # rbind.fill places NAs for missing entries; replace them with 0
dim(rep200Data_WGS_RNA_Matched) # 15512 11794
## Save "rep200Data_WGS_RNA_Matched" as phyloseq table for later use
psmetaQiitaWGS_RNA_AllSeqPlatforms_Joined <- metaQiitaWGS_RNA_AllSeqPlatforms_Joined
psmetaQiitaWGS_RNA_AllSeqPlatforms_Joined$library_size <- rowSums(rep200Data_WGS_RNA_Matched)
psmetaQiitaWGS_RNA_AllSeqPlatforms_Joined$library_size_log10 <- log10(psmetaQiitaWGS_RNA_AllSeqPlatforms_Joined$library_size)
psRep200All <- phyloseq(otu_table(rep200Data_WGS_RNA_Matched, taxa_are_rows = FALSE),
tax_table(as.matrix(rep200TaxSplit)), sample_data(psmetaQiitaWGS_RNA_AllSeqPlatforms_Joined))
# save(psRep200All, fungiOGUs, bacteriaOGUs,
#      file = "Interim_data/phyloseq_tcga_rep200_all_OGUs_25Mar25.RData")
## Find bacterial and fungal OGUs
bacteria_fungi_OGUs <- c(rownames(rep200TaxSplit_Fungi), rownames(rep200TaxSplit_Bacteria))
rep200Data_WGS_RNA_Matched_Filt <- rep200Data_WGS_RNA_Matched[,colnames(rep200Data_WGS_RNA_Matched) %in% bacteria_fungi_OGUs]
dim(rep200Data_WGS_RNA_Matched_Filt) # 15512 11390
rep200Data_WGS_RNA_Matched_Bacteria <- rep200Data_WGS_RNA_Matched[,colnames(rep200Data_WGS_RNA_Matched) %in% rownames(rep200TaxSplit_Bacteria)]
dim(rep200Data_WGS_RNA_Matched_Bacteria) # 15512 11071
rep200Data_WGS_RNA_Matched_Fungi <- rep200Data_WGS_RNA_Matched[,colnames(rep200Data_WGS_RNA_Matched) %in% rownames(rep200TaxSplit_Fungi)]
dim(rep200Data_WGS_RNA_Matched_Fungi) # 15512 319
#----------------------------------------------------------#
# Construct phyloseq object and summarize counts to domain level
#----------------------------------------------------------#
psRep200BacteriaFungi <- phyloseq(otu_table(rep200Data_WGS_RNA_Matched_Filt, taxa_are_rows = FALSE),
tax_table(as.matrix(rep200TaxSplit)), sample_data(metaQiitaWGS_RNA_AllSeqPlatforms_Joined))
# Separate into various subsets
psRep200BacteriaFungi_PT <- subset_samples(psRep200BacteriaFungi, sample_type == "Primary Tumor")
psRep200BacteriaFungi_PT_WGS <- subset_samples(psRep200BacteriaFungi_PT, experimental_strategy == "WGS")
psRep200BacteriaFungi_PT_RNA <- subset_samples(psRep200BacteriaFungi_PT, experimental_strategy == "RNA-Seq")
#-----------------------Aggregate counts to domain level-----------------------#
# Note that k__Bacteria = bacteria and k__Eukaryota = fungi
psRep200BacteriaFungi_domain = aggregate_taxa(psRep200BacteriaFungi, "Domain")
psRep200BacteriaFungi_PT_domain = aggregate_taxa(psRep200BacteriaFungi_PT, "Domain")
psRep200BacteriaFungi_PT_WGS_domain = aggregate_taxa(psRep200BacteriaFungi_PT_WGS, "Domain")
psRep200BacteriaFungi_PT_RNA_domain = aggregate_taxa(psRep200BacteriaFungi_PT_RNA, "Domain")
#----------------------------------------------------------#
# Calculate read %s
#----------------------------------------------------------#
sum(metaQiitaWGS_RNA_AllSeqPlatforms_Joined$cgc_filename %in% rownames(idxstats)) # 15512
sum(rownames(idxstats) %in% metaQiitaWGS_RNA_AllSeqPlatforms_Joined$cgc_filename) # 15512
metaQiitaWGS_RNA_AllSeqPlatforms_Joined_WithBamcounts <- metaQiitaWGS_RNA_AllSeqPlatforms_Joined
metaQiitaWGS_RNA_AllSeqPlatforms_Joined_WithBamcounts$bam_total_reads <- idxstats[metaQiitaWGS_RNA_AllSeqPlatforms_Joined_WithBamcounts$cgc_filename, "total"]
metaQiitaWGS_RNA_AllSeqPlatforms_Joined_WithBamcounts$bam_mapped_reads <- idxstats[metaQiitaWGS_RNA_AllSeqPlatforms_Joined_WithBamcounts$cgc_filename, "mapped"]
metaQiitaWGS_RNA_AllSeqPlatforms_Joined_WithBamcounts$bam_unmapped_reads <- idxstats[metaQiitaWGS_RNA_AllSeqPlatforms_Joined_WithBamcounts$cgc_filename, "unmapped"]
metaQiitaWGS_RNA_AllSeqPlatforms_Joined_WithBamcounts$bam_ratio_unmapped <- idxstats[metaQiitaWGS_RNA_AllSeqPlatforms_Joined_WithBamcounts$cgc_filename, "ratio_unmapped"]
save(metaQiitaWGS_RNA_AllSeqPlatforms_Joined_WithBamcounts,
rep200Data_WGS_RNA_Matched,
rep200Data_WGS_RNA_Matched_Bacteria,
rep200Data_WGS_RNA_Matched_Fungi,
file = "Interim_data/metaQiitaWGS_RNA_AllSeqPlatforms_Joined_WithBamcounts_and_Data_25Mar22.RData")
# Sanity check
all(rownames(metaQiitaWGS_RNA_AllSeqPlatforms_Joined_WithBamcounts) == rownames(rep200Data_WGS_RNA_Matched_Bacteria)) # TRUE
#----------------------Raw read %----------------------#
readSumRep200 <- rowSums(rep200Data_WGS_RNA_Matched)
readSumBacteria <- rowSums(rep200Data_WGS_RNA_Matched_Bacteria)
readSumFungi <- rowSums(rep200Data_WGS_RNA_Matched_Fungi)
# Sanity check
all(names(readSumRep200) == rownames(metaQiitaWGS_RNA_AllSeqPlatforms_Joined_WithBamcounts)) # TRUE
metaQiitaWGS_RNA_AllSeqPlatforms_Joined_WithBamcounts$sum_rep200 <- unname(readSumRep200)
metaQiitaWGS_RNA_AllSeqPlatforms_Joined_WithBamcounts$sum_bacteria <- unname(readSumBacteria)
metaQiitaWGS_RNA_AllSeqPlatforms_Joined_WithBamcounts$sum_fungi <- unname(readSumFungi)
metaQiitaWGS_RNA_AllSeqPlatforms_Joined_WithBamcounts$ratio_rep200_total <- metaQiitaWGS_RNA_AllSeqPlatforms_Joined_WithBamcounts$sum_rep200/metaQiitaWGS_RNA_AllSeqPlatforms_Joined_WithBamcounts$bam_total_reads
metaQiitaWGS_RNA_AllSeqPlatforms_Joined_WithBamcounts$ratio_rep200_unmapped <- metaQiitaWGS_RNA_AllSeqPlatforms_Joined_WithBamcounts$sum_rep200/metaQiitaWGS_RNA_AllSeqPlatforms_Joined_WithBamcounts$bam_unmapped_reads
metaQiitaWGS_RNA_AllSeqPlatforms_Joined_WithBamcounts$ratio_bacteria_total <- metaQiitaWGS_RNA_AllSeqPlatforms_Joined_WithBamcounts$sum_bacteria/metaQiitaWGS_RNA_AllSeqPlatforms_Joined_WithBamcounts$bam_total_reads
metaQiitaWGS_RNA_AllSeqPlatforms_Joined_WithBamcounts$ratio_bacteria_unmapped <- metaQiitaWGS_RNA_AllSeqPlatforms_Joined_WithBamcounts$sum_bacteria/metaQiitaWGS_RNA_AllSeqPlatforms_Joined_WithBamcounts$bam_unmapped
metaQiitaWGS_RNA_AllSeqPlatforms_Joined_WithBamcounts$ratio_fungi_total <- metaQiitaWGS_RNA_AllSeqPlatforms_Joined_WithBamcounts$sum_fungi/metaQiitaWGS_RNA_AllSeqPlatforms_Joined_WithBamcounts$bam_total_reads
metaQiitaWGS_RNA_AllSeqPlatforms_Joined_WithBamcounts$ratio_fungi_unmapped <- metaQiitaWGS_RNA_AllSeqPlatforms_Joined_WithBamcounts$sum_fungi/metaQiitaWGS_RNA_AllSeqPlatforms_Joined_WithBamcounts$bam_unmapped
metaQiitaWGS_RNA_AllSeqPlatforms_Joined_WithBamcounts$percent_rep200_total <- 100*metaQiitaWGS_RNA_AllSeqPlatforms_Joined_WithBamcounts$ratio_rep200_total
metaQiitaWGS_RNA_AllSeqPlatforms_Joined_WithBamcounts$percent_rep200_unmapped <- 100*metaQiitaWGS_RNA_AllSeqPlatforms_Joined_WithBamcounts$ratio_rep200_unmapped
metaQiitaWGS_RNA_AllSeqPlatforms_Joined_WithBamcounts$percent_bacteria_total <- 100*metaQiitaWGS_RNA_AllSeqPlatforms_Joined_WithBamcounts$ratio_bacteria_total
metaQiitaWGS_RNA_AllSeqPlatforms_Joined_WithBamcounts$percent_bacteria_unmapped <- 100*metaQiitaWGS_RNA_AllSeqPlatforms_Joined_WithBamcounts$ratio_bacteria_unmapped
metaQiitaWGS_RNA_AllSeqPlatforms_Joined_WithBamcounts$percent_fungi_total <- 100*metaQiitaWGS_RNA_AllSeqPlatforms_Joined_WithBamcounts$ratio_fungi_total
metaQiitaWGS_RNA_AllSeqPlatforms_Joined_WithBamcounts$percent_fungi_unmapped <- 100*metaQiitaWGS_RNA_AllSeqPlatforms_Joined_WithBamcounts$ratio_fungi_unmapped
# 447 samples have 0 fungal reads although all have >0 bacterial reads
# Running the following line of code will create a version of the metadata
# only with nonzero counts. However, since these 0 counts change the distribution
# of % fungal reads (including their cancer type median rankings), they will be maintained for now
metaQiitaWGS_RNA_AllSeqPlatforms_Joined_WithBamcounts_Nonzero <- metaQiitaWGS_RNA_AllSeqPlatforms_Joined_WithBamcounts %>%
filter(readSumFungi > 0) %>% droplevels()
cols2Keep <- c("investigation","sample_type","data_submitting_center_label","experimental_strategy",
"percent_rep200_total", "percent_rep200_unmapped",
"percent_bacteria_total", "percent_bacteria_unmapped",
"percent_fungi_total", "percent_fungi_unmapped")
bamCountWithMicrobes <- droplevels(metaQiitaWGS_RNA_AllSeqPlatforms_Joined_WithBamcounts[,cols2Keep])
bamCountWithMicrobes.melted <- bamCountWithMicrobes %>%
rownames_to_column("sampleid") %>%
mutate(investigation_short = gsub("TCGA-","",investigation)) %>%
reshape2::melt(id.vars = c("sampleid","investigation_short","investigation","sample_type","data_submitting_center_label","experimental_strategy"))
bamCountWithMicrobes.melted$variable <- factor(bamCountWithMicrobes.melted$variable,
levels = c("percent_bacteria_unmapped", "percent_fungi_unmapped", "percent_rep200_unmapped",
"percent_bacteria_total", "percent_fungi_total", "percent_rep200_total"))
# save(metaQiitaWGS_RNA_AllSeqPlatforms_Joined_WithBamcounts,
#      bamCountWithMicrobes,
#      bamCountWithMicrobes.melted,
#      file = "Interim_data/data_for_read_percentage_plots_AllSeqPlatforms_26Mar22.RData")
#-----------------------Plot PT fungi %s-----------------------#
filePath <- "Figures/Supplementary_Figures/"
bamCountWithMicrobes.melted %>%
filter(variable %in% c("percent_fungi_unmapped","percent_fungi_total")) %>%
# filter(variable %in% c("percent_fungi_total")) %>%
filter(sample_type == "Primary Tumor") %>%
ggplot(aes(reorder(investigation_short, value, FUN=median),value, fill=variable)) +
geom_boxplot(position = "dodge") + theme_pubr() +
ylab("Percentage of reads (%)") + xlab("TCGA Cancer Type") +
ggtitle("Percentage of reads in TCGA primary tumor samples mapped to fungal genomes in rep200") +
rotate_x_text(90) + scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
scale_fill_aaas(labels = c("percent_fungi_unmapped" = "Percentage of unmapped reads\nclassified as fungal (%)",
"percent_fungi_total" = "Percentage of total reads\nclassified as fungal (%)")) +
theme(legend.title = element_blank(), plot.title = element_text(hjust=0.5)) +
# geom_label(label = "Kruskal-Wallis, p < 2.2e-16", x = 0.1) +
# stat_compare_means(label.x.npc = 0.1, label.y.npc = 0.8) +
stat_summary(geom = "text", angle = 0,
fun.data = function(x){c(y = -8, label = length(x) )},
colour = "blue",
position = position_dodge(width = 0))
require(rstatix)
bamCountWithMicrobes.melted %>%
filter(variable %in% c("percent_fungi_unmapped","percent_fungi_total")) %>%
filter(sample_type == "Primary Tumor") %>%
group_by(variable) %>%
anova_test(value ~ investigation_short) %>% data.frame()
require(rstatix)
bamCountWithMicrobes.melted %>%
filter(variable %in% c("percent_fungi_unmapped","percent_fungi_total")) %>%
filter(sample_type == "Primary Tumor") %>%
group_by(variable) %>%
anova_test(value ~ investigation_short) %>% data.frame()
require(rstatix)
bamCountWithMicrobes.melted %>%
filter(variable %in% c("percent_fungi_unmapped","percent_fungi_total")) %>%
filter(sample_type == "Primary Tumor") %>%
group_by(variable) %>%
anova_test(value ~ investigation_short) %>% data.frame()
bamCountWithMicrobes.melted %>%
filter(variable %in% c("percent_fungi_unmapped","percent_fungi_total")) %>%
ggplot(aes(reorder(investigation_short, value, FUN=median),value, fill=variable)) +
geom_boxplot(position = "dodge") + theme_pubr() +
ylab("Percentage of reads (%)") + xlab("TCGA Cancer Type") +
ggtitle("Percentage of reads in TCGA across all sample types mapped to fungal genomes in rep200") +
rotate_x_text(90) + scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
scale_fill_aaas(labels = c("percent_fungi_unmapped" = "Percentage of unmapped reads\nclassified as fungal (%)",
"percent_fungi_total" = "Percentage of total reads\nclassified as fungal (%)")) +
theme(legend.title = element_blank(), plot.title = element_text(hjust=0.5)) +
stat_summary(geom = "text", angle = 0,
fun.data = function(x){c(y = -8, label = length(x) )},
colour = "blue",
position = position_dodge(width = 0))
require(rstatix)
bamCountWithMicrobes.melted %>%
filter(variable %in% c("percent_fungi_unmapped","percent_fungi_total")) %>%
group_by(variable) %>%
anova_test(value ~ investigation_short) %>% data.frame()
bamCountWithMicrobes.melted %>%
filter(variable %in% c("percent_rep200_unmapped","percent_rep200_total")) %>%
filter(sample_type == "Primary Tumor") %>%
group_by(variable) %>%
anova_test(value ~ investigation_short) %>% data.frame()
bamCountWithMicrobes.melted %>%
filter(variable %in% c("percent_rep200_unmapped","percent_rep200_total")) %>%
group_by(variable) %>%
anova_test(value ~ investigation_short) %>% data.frame()
bamCountWithMicrobes.melted %>%
filter(variable %in% c("percent_bacteria_unmapped","percent_bacteria_total")) %>%
filter(sample_type == "Primary Tumor") %>%
group_by(variable) %>%
anova_test(value ~ investigation_short) %>% data.frame()
bamCountWithMicrobes.melted %>%
filter(variable %in% c("percent_bacteria_unmapped","percent_bacteria_total")) %>%
group_by(variable) %>%
anova_test(value ~ investigation_short) %>% data.frame()
