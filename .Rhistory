plots_mlFungiDecontam_CV <- plotMLWithCIs(mlFungiDecontam_CV, showRepCurves=TRUE, ciAlpha = 0.4, ciLevel = 0.99)
# Combine ROC curves
plots_mlFullDB_CV$rocPlot +
geom_path(data = do.call(rbind, plots_mlFungiDecontam_CV$rocCurveData),aes(x=fpr,y=tpr), color = "lightgray", size = 0.5) +
geom_path(data = plots_mlFungiDecontam_CV$interpROCYDf_CI, aes(x = xval, y = Estimate), color = "red", size = 1) +
geom_ribbon(data = plots_mlFungiDecontam_CV$interpROCYDf_CI, aes(x = xval, ymin = CI.lower, ymax = CI.upper),
fill = "green", alpha = 0.3, inherit.aes = F)
?geom_path
# Combine ROC curves
plots_mlFullDB_CV$rocPlot +
geom_path(data = do.call(rbind, plots_mlFungiDecontam_CV$rocCurveData),aes(x=fpr,y=tpr), color = "lightgray", size = 0.5) +
geom_path(data = plots_mlFungiDecontam_CV$interpROCYDf_CI, aes(x = xval, y = Estimate), color = "red", size = 1) +
geom_ribbon(data = plots_mlFungiDecontam_CV$interpROCYDf_CI, aes(x = xval, ymin = CI.lower, ymax = CI.upper),
fill = "green", alpha = 0.3, inherit.aes = F)
str(plots_mlFullDB_CV$rocCurveData)
str(plots_mlFullDB_CV$interpROCYDf_CI)
str(plots_mlFungiDecontam_CV$interpROCYDf_CI)
str(plots_mlFungiDecontam_CV$interpPRYDf_CI)
plotMLWithCIs <- function(modelOutput, showRepCurves=FALSE, sizeRepCurves=0.5,
sizeAvgCurve=1, colorAvgCurve="blue",ciFillColor="orange",
interpXLength = 1e3, ciAlpha = 0.3, ciLevel = 0.95){
require(gmodels)
# TO DO: INPUT LIST OF MODELS, ITERATE OVER LIST, AND PLOT TOGETHER
positiveClass <- "Cancer"
negativeClass <- "Healthy"
interpX <- seq(0, 1, length.out = interpXLength)
tmpML_Res <- modelOutput$multiClass
tmpML_Res$Rep <- gsub("^Fold[0-9]+\\.","",tmpML_Res$Resample)
numRep <- length(names(table(tmpML_Res$Rep)))
tmpML_Res_Split <- split(tmpML_Res, tmpML_Res$Rep)
interpROCY <- list()
interpPRY <- list()
rocCurveData <- list()
auroc <- vector()
prCurveData <- list()
aupr <- vector()
for(ii in seq_along(tmpML_Res_Split)){
mlPreds <- tmpML_Res_Split[[ii]]
fg <- mlPreds[mlPreds$obs == positiveClass, positiveClass]
bg <- mlPreds[mlPreds$obs == negativeClass, positiveClass]
prroc_roc <- roc.curve(scores.class0 = fg, scores.class1 = bg, curve = T)
prroc_pr <- pr.curve(scores.class0 = fg, scores.class1 = bg, curve = T, rand.compute=T)
rocCurveData[[ii]] <- data.frame(prroc_roc$curve)
colnames(rocCurveData[[ii]]) <- c("fpr","tpr","thresh")
auroc[ii] <- prroc_roc$auc
interpROCVals <- approx(x = rocCurveData[[ii]][,"fpr"], y = rocCurveData[[ii]][,"tpr"], xout = interpX)
interpROCY[[ii]] <- interpROCVals$y
prCurveData[[ii]] <- data.frame(prroc_pr$curve)
aupr[ii] <- prroc_pr$auc.integral
colnames(prCurveData[[ii]]) <- c("recall","precision","thresh")
interpPRVals <- approx(x = prCurveData[[ii]][,"recall"], y = prCurveData[[ii]][,"precision"], xout = interpX)
interpPRY[[ii]] <- interpPRVals$y
}
# ROC
aurocCI <- ci(as.vector(auroc))
interpROCYDf <- data.frame(interpROCY)
colnames(interpROCYDf) <- paste0("Rep",1:numRep)
interpROCYDf_CI <- data.frame(t(apply(as.matrix(interpROCYDf), 1, function(x) ci(x, confidence = ciLevel))))
interpROCYDf_CI$xval <- interpX
interpROCYDf_CI <- rbind(rep(0,dim(interpROCYDf_CI)[2]), # make sure plot begins at 0,0
interpROCYDf_CI,
rep(1,dim(interpROCYDf_CI)[2])) # make sure plot ends at 1,1
# PR
auprCI <- ci(as.vector(aupr))
interpPRYDf <- data.frame(interpPRY)
colnames(interpPRYDf) <- paste0("Rep",1:numRep)
interpPRYDf_CI <- data.frame(t(apply(as.matrix(interpPRYDf), 1, function(x) ci(x, confidence = ciLevel))))
interpPRYDf_CI$xval <- interpX
interpPRYDf_CI <- rbind(c(1,0,0,0,0), # make sure plot begins at 0,1
interpPRYDf_CI,
c(0,0,0,0,1)) # make sure plot ends at 1,0
if(showRepCurves){
# ROC
rocPlot <- ggplot(data = rocCurveData[[1]], aes(x = fpr, y = tpr)) +
geom_path(color = "gray", size = sizeRepCurves) + theme_minimal() +
geom_abline(intercept = 0, slope = 1, color = "gray", size = 0.5) +
coord_equal(ratio=1) + xlim(0, 1) + ylim(0,1) +
labs(x = "False Positive Rate", y = "True Positive Rate")
for(jj in 2:numRep){
rocPlot <- rocPlot + geom_path(data = rocCurveData[[jj]], aes(x = fpr, y = tpr), color = "gray", size = sizeRepCurves)
}
rocPlot <- rocPlot + geom_path(data = interpROCYDf_CI, aes(x = xval, y = Estimate), color = colorAvgCurve, size = sizeAvgCurve) +
geom_ribbon(data = interpROCYDf_CI, aes(x = xval, ymin = CI.lower, ymax = CI.upper),
fill = ciFillColor, alpha = ciAlpha, inherit.aes = F)
# PR
prPlot <- ggplot(data = prCurveData[[1]], aes(x = recall, y = precision)) +
geom_path(color = "gray", size = sizeRepCurves) + theme_minimal() +
coord_equal(ratio=1) + xlim(0, 1) + ylim(0,1) +
labs(x = "Recall", y = "Precision")
for(jj in 2:numRep){
prPlot <- prPlot + geom_path(data = prCurveData[[jj]], aes(x = recall, y = precision), color = "gray", size = sizeRepCurves)
}
prPlot <- prPlot + geom_path(data = interpPRYDf_CI, aes(x = xval, y = Estimate), color = colorAvgCurve, size = sizeAvgCurve) +
geom_ribbon(data = interpPRYDf_CI, aes(x = xval, ymin = CI.lower, ymax = CI.upper),
fill = ciFillColor, alpha = ciAlpha, inherit.aes = F)
} else{
# ROC
rocPlot <- ggplot(data = interpROCYDf_CI, aes(x = xval, y = Estimate)) +
geom_path(color = colorAvgCurve, size = sizeAvgCurve) + theme_minimal() +
geom_ribbon(aes(ymin = CI.lower, ymax = CI.upper), fill = ciFillColor, alpha = 0.3) +
geom_abline(intercept = 0, slope = 1, color = "gray", size = 0.5) +
coord_equal(ratio=1) + xlim(0, 1) + ylim(0,1) +
labs(x = "False Positive Rate", y = "True Positive Rate")
# PR
prPlot <- ggplot(data = interpPRYDf_CI, aes(x = xval, y = Estimate)) +
geom_path(color = colorAvgCurve, size = sizeAvgCurve) + theme_minimal() +
geom_ribbon(aes(ymin = CI.lower, ymax = CI.upper), fill = ciFillColor, alpha = 0.3) +
coord_equal(ratio=1) + xlim(0, 1) + ylim(0,1) +
labs(x = "Recall", y = "Precision")
}
combinedPlots <- ggarrange(rocPlot, prPlot, ncol = 2)
print(combinedPlots)
res <- list(
rocPlot=rocPlot,
prPlot=prPlot,
combinedPlots=combinedPlots,
rocCurveData=rocCurveData,
prCurveData=prCurveData,
interpROCYDf_CI=interpROCYDf_CI,
interpPRYDf_CI=interpPRYDf_CI,
auroc=auroc,
aurocCI=aurocCI,
aupr=aupr,
auprCI=auprCI
)
return(res)
}
plots_mlFullDB_CV <- plotMLWithCIs(mlFullDB_CV, showRepCurves=TRUE, ciAlpha = 0.4, ciLevel = 0.99)
plots_mlFullDB_CV <- plotMLWithCIs(mlFullDB_CV, showRepCurves=TRUE, sizeAvgCurve=0.5, ciAlpha = 0.4, ciLevel = 0.99)
plots_mlFungiDecontam_CV <- plotMLWithCIs(mlFungiDecontam_CV, sizeAvgCurve=0.5, showRepCurves=TRUE, ciAlpha = 0.4, ciLevel = 0.99)
# Combine ROC curves
plots_mlFullDB_CV$rocPlot +
geom_path(data = do.call(rbind, plots_mlFungiDecontam_CV$rocCurveData),aes(x=fpr,y=tpr), color = "lightgray", size = 0.5) +
geom_path(data = plots_mlFungiDecontam_CV$interpROCYDf_CI, aes(x = xval, y = Estimate), color = "red", size = 1) +
geom_ribbon(data = plots_mlFungiDecontam_CV$interpROCYDf_CI, aes(x = xval, ymin = CI.lower, ymax = CI.upper),
fill = "green", alpha = 0.3, inherit.aes = F)
# Combine ROC curves
plots_mlFungiDecontam_CV$rocPlot +
geom_path(data = do.call(rbind, plots_mlFullDB_CV$rocCurveData),aes(x=fpr,y=tpr), color = "lightgray", size = 0.5) +
geom_path(data = plots_mlFullDB_CV$interpROCYDf_CI, aes(x = xval, y = Estimate), color = "red", size = 1) +
geom_ribbon(data = plots_mlFullDB_CV$interpROCYDf_CI, aes(x = xval, ymin = CI.lower, ymax = CI.upper),
fill = "green", alpha = 0.3, inherit.aes = F)
# Combine PR curves
plots_mlFungiDecontam_CV$prPlot +
geom_path(data = do.call(rbind, plots_mlFullDB_CV$prCurveData),aes(x=fpr,y=tpr), color = "lightgray", size = 0.5) +
geom_path(data = plots_mlFullDB_CV$interpPRYDf_CI, aes(x = xval, y = Estimate), color = "red", size = 1) +
geom_ribbon(data = plots_mlFullDB_CV$interpPRYDf_CI, aes(x = xval, ymin = CI.lower, ymax = CI.upper),
fill = "green", alpha = 0.3, inherit.aes = F)
# Combine PR curves
plots_mlFungiDecontam_CV$prPlot +
geom_path(data = do.call(rbind, plots_mlFullDB_CV$prCurveData),aes(x=recall,y=precision), color = "lightgray", size = 0.5) +
geom_path(data = plots_mlFullDB_CV$interpPRYDf_CI, aes(x = xval, y = Estimate), color = "red", size = 1) +
geom_ribbon(data = plots_mlFullDB_CV$interpPRYDf_CI, aes(x = xval, ymin = CI.lower, ymax = CI.upper),
fill = "green", alpha = 0.3, inherit.aes = F)
# Combine PR curves
plots_mlFungiDecontam_CV$prPlot +
geom_path(data = do.call(rbind, plots_mlFullDB_CV$prCurveData),aes(x=recall,y=precision), color = "lightgray", size = 0.5) +
geom_path(data = plots_mlFullDB_CV$interpPRYDf_CI, aes(x = xval, y = Estimate), color = "red", size = 0.5) +
geom_ribbon(data = plots_mlFullDB_CV$interpPRYDf_CI, aes(x = xval, ymin = CI.lower, ymax = CI.upper),
fill = "green", alpha = 0.3, inherit.aes = F)
plots_mlFullDB_CV <- plotMLWithCIs(mlFullDB_CV, showRepCurves=TRUE, sizeAvgCurve=0.5, ciAlpha = 0.4, ciLevel = 0.99)
plots_mlFungiDecontam_CV <- plotMLWithCIs(mlFungiDecontam_CV, sizeAvgCurve=0.5, showRepCurves=TRUE, ciAlpha = 0.4, ciLevel = 0.99)
# Combine PR curves
plots_mlFungiDecontam_CV$prPlot +
geom_path(data = do.call(rbind, plots_mlFullDB_CV$prCurveData),aes(x=recall,y=precision), color = "purple", size = 0.5) +
geom_path(data = plots_mlFullDB_CV$interpPRYDf_CI, aes(x = xval, y = Estimate), color = "red", size = 0.5) +
geom_ribbon(data = plots_mlFullDB_CV$interpPRYDf_CI, aes(x = xval, ymin = CI.lower, ymax = CI.upper),
fill = "green", alpha = 0.3, inherit.aes = F)
str(plots_mlFullDB_CV$prCurveData)
str(do.call(rbind, plots_mlFullDB_CV$prCurveData))
plotMLWithCIs <- function(modelOutput, showRepCurves=FALSE, sizeRepCurves=0.5,
sizeAvgCurve=1, colorAvgCurve="blue",ciFillColor="orange",
interpXLength = 1e3, ciAlpha = 0.3, ciLevel = 0.95){
require(gmodels)
# TO DO: INPUT LIST OF MODELS, ITERATE OVER LIST, AND PLOT TOGETHER
positiveClass <- "Cancer"
negativeClass <- "Healthy"
interpX <- seq(0, 1, length.out = interpXLength)
tmpML_Res <- modelOutput$multiClass
tmpML_Res$Rep <- gsub("^Fold[0-9]+\\.","",tmpML_Res$Resample)
numRep <- length(names(table(tmpML_Res$Rep)))
tmpML_Res_Split <- split(tmpML_Res, tmpML_Res$Rep)
interpROCY <- list()
interpPRY <- list()
rocCurveData <- list()
auroc <- vector()
prCurveData <- list()
aupr <- vector()
for(ii in seq_along(tmpML_Res_Split)){
mlPreds <- tmpML_Res_Split[[ii]]
fg <- mlPreds[mlPreds$obs == positiveClass, positiveClass]
bg <- mlPreds[mlPreds$obs == negativeClass, positiveClass]
prroc_roc <- roc.curve(scores.class0 = fg, scores.class1 = bg, curve = T)
prroc_pr <- pr.curve(scores.class0 = fg, scores.class1 = bg, curve = T, rand.compute=T)
rocCurveData[[ii]] <- data.frame(prroc_roc$curve)
colnames(rocCurveData[[ii]]) <- c("fpr","tpr","thresh")
auroc[ii] <- prroc_roc$auc
interpROCVals <- approx(x = rocCurveData[[ii]][,"fpr"], y = rocCurveData[[ii]][,"tpr"], xout = interpX)
interpROCY[[ii]] <- interpROCVals$y
prCurveData[[ii]] <- data.frame(prroc_pr$curve)
aupr[ii] <- prroc_pr$auc.integral
colnames(prCurveData[[ii]]) <- c("recall","precision","thresh")
interpPRVals <- approx(x = prCurveData[[ii]][,"recall"], y = prCurveData[[ii]][,"precision"], xout = interpX)
interpPRY[[ii]] <- interpPRVals$y
}
# ROC
aurocCI <- ci(as.vector(auroc))
interpROCYDf <- data.frame(interpROCY)
colnames(interpROCYDf) <- paste0("Rep",1:numRep)
interpROCYDf_CI <- data.frame(t(apply(as.matrix(interpROCYDf), 1, function(x) ci(x, confidence = ciLevel))))
interpROCYDf_CI$xval <- interpX
interpROCYDf_CI <- rbind(rep(0,dim(interpROCYDf_CI)[2]), # make sure plot begins at 0,0
interpROCYDf_CI,
rep(1,dim(interpROCYDf_CI)[2])) # make sure plot ends at 1,1
# PR
auprCI <- ci(as.vector(aupr))
interpPRYDf <- data.frame(interpPRY)
colnames(interpPRYDf) <- paste0("Rep",1:numRep)
interpPRYDf_CI <- data.frame(t(apply(as.matrix(interpPRYDf), 1, function(x) ci(x, confidence = ciLevel))))
interpPRYDf_CI$xval <- interpX
# interpPRYDf_CI <- rbind(c(1,0,0,0,0), # make sure plot begins at 0,1
#                         interpPRYDf_CI,
#                         c(0,0,0,0,1)) # make sure plot ends at 1,0
if(showRepCurves){
# ROC
rocPlot <- ggplot(data = rocCurveData[[1]], aes(x = fpr, y = tpr)) +
geom_path(color = "gray", size = sizeRepCurves) + theme_minimal() +
geom_abline(intercept = 0, slope = 1, color = "gray", size = 0.5) +
coord_equal(ratio=1) + xlim(0, 1) + ylim(0,1) +
labs(x = "False Positive Rate", y = "True Positive Rate")
for(jj in 2:numRep){
rocPlot <- rocPlot + geom_path(data = rocCurveData[[jj]], aes(x = fpr, y = tpr), color = "gray", size = sizeRepCurves)
}
rocPlot <- rocPlot + geom_path(data = interpROCYDf_CI, aes(x = xval, y = Estimate), color = colorAvgCurve, size = sizeAvgCurve) +
geom_ribbon(data = interpROCYDf_CI, aes(x = xval, ymin = CI.lower, ymax = CI.upper),
fill = ciFillColor, alpha = ciAlpha, inherit.aes = F)
# PR
prPlot <- ggplot(data = prCurveData[[1]], aes(x = recall, y = precision)) +
geom_path(color = "gray", size = sizeRepCurves) + theme_minimal() +
coord_equal(ratio=1) + xlim(0, 1) + ylim(0,1) +
labs(x = "Recall", y = "Precision")
for(jj in 2:numRep){
prPlot <- prPlot + geom_path(data = prCurveData[[jj]], aes(x = recall, y = precision), color = "gray", size = sizeRepCurves)
}
prPlot <- prPlot + geom_path(data = interpPRYDf_CI, aes(x = xval, y = Estimate), color = colorAvgCurve, size = sizeAvgCurve) +
geom_ribbon(data = interpPRYDf_CI, aes(x = xval, ymin = CI.lower, ymax = CI.upper),
fill = ciFillColor, alpha = ciAlpha, inherit.aes = F)
} else{
# ROC
rocPlot <- ggplot(data = interpROCYDf_CI, aes(x = xval, y = Estimate)) +
geom_path(color = colorAvgCurve, size = sizeAvgCurve) + theme_minimal() +
geom_ribbon(aes(ymin = CI.lower, ymax = CI.upper), fill = ciFillColor, alpha = 0.3) +
geom_abline(intercept = 0, slope = 1, color = "gray", size = 0.5) +
coord_equal(ratio=1) + xlim(0, 1) + ylim(0,1) +
labs(x = "False Positive Rate", y = "True Positive Rate")
# PR
prPlot <- ggplot(data = interpPRYDf_CI, aes(x = xval, y = Estimate)) +
geom_path(color = colorAvgCurve, size = sizeAvgCurve) + theme_minimal() +
geom_ribbon(aes(ymin = CI.lower, ymax = CI.upper), fill = ciFillColor, alpha = 0.3) +
coord_equal(ratio=1) + xlim(0, 1) + ylim(0,1) +
labs(x = "Recall", y = "Precision")
}
combinedPlots <- ggarrange(rocPlot, prPlot, ncol = 2)
print(combinedPlots)
res <- list(
rocPlot=rocPlot,
prPlot=prPlot,
combinedPlots=combinedPlots,
rocCurveData=rocCurveData,
prCurveData=prCurveData,
interpROCYDf_CI=interpROCYDf_CI,
interpPRYDf_CI=interpPRYDf_CI,
auroc=auroc,
aurocCI=aurocCI,
aupr=aupr,
auprCI=auprCI
)
return(res)
}
plots_mlFullDB_CV <- plotMLWithCIs(mlFullDB_CV, showRepCurves=TRUE, sizeAvgCurve=0.5, ciAlpha = 0.4, ciLevel = 0.99)
plots_mlFungiDecontam_CV <- plotMLWithCIs(mlFungiDecontam_CV, sizeAvgCurve=0.5, showRepCurves=TRUE, ciAlpha = 0.4, ciLevel = 0.99)
# Combine ROC curves
plots_mlFungiDecontam_CV$rocPlot +
geom_path(data = do.call(rbind, plots_mlFullDB_CV$rocCurveData),aes(x=fpr,y=tpr), color = "lightgray", size = 0.5) +
geom_path(data = plots_mlFullDB_CV$interpROCYDf_CI, aes(x = xval, y = Estimate), color = "red", size = 1) +
geom_ribbon(data = plots_mlFullDB_CV$interpROCYDf_CI, aes(x = xval, ymin = CI.lower, ymax = CI.upper),
fill = "green", alpha = 0.3, inherit.aes = F)
# Combine PR curves
plots_mlFungiDecontam_CV$prPlot +
geom_path(data = do.call(rbind, plots_mlFullDB_CV$prCurveData),aes(x=recall,y=precision), color = "purple", size = 0.5) +
geom_path(data = plots_mlFullDB_CV$interpPRYDf_CI, aes(x = xval, y = Estimate), color = "red", size = 0.5) +
geom_ribbon(data = plots_mlFullDB_CV$interpPRYDf_CI, aes(x = xval, ymin = CI.lower, ymax = CI.upper),
fill = "green", alpha = 0.3, inherit.aes = F)
plotMLWithCIs <- function(modelOutput, showRepCurves=FALSE, sizeRepCurves=0.5,
sizeAvgCurve=1, colorAvgCurve="blue",ciFillColor="orange",
interpXLength = 1e3, ciAlpha = 0.3, ciLevel = 0.95){
require(gmodels)
# TO DO: INPUT LIST OF MODELS, ITERATE OVER LIST, AND PLOT TOGETHER
positiveClass <- "Cancer"
negativeClass <- "Healthy"
interpX <- seq(0, 1, length.out = interpXLength)
tmpML_Res <- modelOutput$multiClass
tmpML_Res$Rep <- gsub("^Fold[0-9]+\\.","",tmpML_Res$Resample)
numRep <- length(names(table(tmpML_Res$Rep)))
tmpML_Res_Split <- split(tmpML_Res, tmpML_Res$Rep)
interpROCY <- list()
interpPRY <- list()
rocCurveData <- list()
auroc <- vector()
prCurveData <- list()
aupr <- vector()
for(ii in seq_along(tmpML_Res_Split)){
mlPreds <- tmpML_Res_Split[[ii]]
fg <- mlPreds[mlPreds$obs == positiveClass, positiveClass]
bg <- mlPreds[mlPreds$obs == negativeClass, positiveClass]
prroc_roc <- roc.curve(scores.class0 = fg, scores.class1 = bg, curve = T)
prroc_pr <- pr.curve(scores.class0 = fg, scores.class1 = bg, curve = T, rand.compute=T)
rocCurveData[[ii]] <- data.frame(prroc_roc$curve)
colnames(rocCurveData[[ii]]) <- c("fpr","tpr","thresh")
auroc[ii] <- prroc_roc$auc
interpROCVals <- approx(x = rocCurveData[[ii]][,"fpr"], y = rocCurveData[[ii]][,"tpr"], xout = interpX)
interpROCY[[ii]] <- interpROCVals$y
prCurveData[[ii]] <- data.frame(prroc_pr$curve)
aupr[ii] <- prroc_pr$auc.integral
colnames(prCurveData[[ii]]) <- c("recall","precision","thresh")
interpPRVals <- approx(x = prCurveData[[ii]][,"recall"], y = prCurveData[[ii]][,"precision"], xout = interpX)
interpPRY[[ii]] <- interpPRVals$y
}
# ROC
aurocCI <- ci(as.vector(auroc))
interpROCYDf <- data.frame(interpROCY)
colnames(interpROCYDf) <- paste0("Rep",1:numRep)
interpROCYDf_CI <- data.frame(t(apply(as.matrix(interpROCYDf), 1, function(x) ci(x, confidence = ciLevel))))
interpROCYDf_CI$xval <- interpX
interpROCYDf_CI <- rbind(rep(0,dim(interpROCYDf_CI)[2]), # make sure plot begins at 0,0
interpROCYDf_CI,
rep(1,dim(interpROCYDf_CI)[2])) # make sure plot ends at 1,1
# PR
auprCI <- ci(as.vector(aupr))
interpPRYDf <- data.frame(interpPRY)
colnames(interpPRYDf) <- paste0("Rep",1:numRep)
interpPRYDf_CI <- data.frame(t(apply(as.matrix(interpPRYDf), 1, function(x) ci(x, confidence = ciLevel))))
interpPRYDf_CI$xval <- interpX
interpPRYDf_CI <- rbind(c(1,0,0,0,0), # make sure plot begins at 0,1
interpPRYDf_CI,
c(0,0,0,0,1)) # make sure plot ends at 1,0
if(showRepCurves){
# ROC
rocPlot <- ggplot(data = rocCurveData[[1]], aes(x = fpr, y = tpr)) +
geom_path(color = "gray", size = sizeRepCurves) + theme_minimal() +
geom_abline(intercept = 0, slope = 1, color = "gray", size = 0.5) +
coord_equal(ratio=1) + xlim(0, 1) + ylim(0,1) +
labs(x = "False Positive Rate", y = "True Positive Rate")
for(jj in 2:numRep){
rocPlot <- rocPlot + geom_path(data = rocCurveData[[jj]], aes(x = fpr, y = tpr), color = "gray", size = sizeRepCurves)
}
rocPlot <- rocPlot + geom_path(data = interpROCYDf_CI, aes(x = xval, y = Estimate), color = colorAvgCurve, size = sizeAvgCurve) +
geom_ribbon(data = interpROCYDf_CI, aes(x = xval, ymin = CI.lower, ymax = CI.upper),
fill = ciFillColor, alpha = ciAlpha, inherit.aes = F)
# PR
prPlot <- ggplot(data = prCurveData[[1]], aes(x = recall, y = precision)) +
geom_path(color = "gray", size = sizeRepCurves) + theme_minimal() +
coord_equal(ratio=1) + xlim(0, 1) + ylim(0,1) +
labs(x = "Recall", y = "Precision")
for(jj in 2:numRep){
prPlot <- prPlot + geom_path(data = prCurveData[[jj]], aes(x = recall, y = precision), color = "gray", size = sizeRepCurves)
}
prPlot <- prPlot + geom_path(data = interpPRYDf_CI, aes(x = xval, y = Estimate), color = colorAvgCurve, size = sizeAvgCurve) +
geom_ribbon(data = interpPRYDf_CI, aes(x = xval, ymin = CI.lower, ymax = CI.upper),
fill = ciFillColor, alpha = ciAlpha, inherit.aes = F)
} else{
# ROC
rocPlot <- ggplot(data = interpROCYDf_CI, aes(x = xval, y = Estimate)) +
geom_path(color = colorAvgCurve, size = sizeAvgCurve) + theme_minimal() +
geom_ribbon(aes(ymin = CI.lower, ymax = CI.upper), fill = ciFillColor, alpha = 0.3) +
geom_abline(intercept = 0, slope = 1, color = "gray", size = 0.5) +
coord_equal(ratio=1) + xlim(0, 1) + ylim(0,1) +
labs(x = "False Positive Rate", y = "True Positive Rate")
# PR
prPlot <- ggplot(data = interpPRYDf_CI, aes(x = xval, y = Estimate)) +
geom_path(color = colorAvgCurve, size = sizeAvgCurve) + theme_minimal() +
geom_ribbon(aes(ymin = CI.lower, ymax = CI.upper), fill = ciFillColor, alpha = 0.3) +
coord_equal(ratio=1) + xlim(0, 1) + ylim(0,1) +
labs(x = "Recall", y = "Precision")
}
combinedPlots <- ggarrange(rocPlot, prPlot, ncol = 2)
print(combinedPlots)
res <- list(
rocPlot=rocPlot,
prPlot=prPlot,
combinedPlots=combinedPlots,
rocCurveData=rocCurveData,
prCurveData=prCurveData,
interpROCYDf_CI=interpROCYDf_CI,
interpPRYDf_CI=interpPRYDf_CI,
auroc=auroc,
aurocCI=aurocCI,
aupr=aupr,
auprCI=auprCI
)
return(res)
}
plots_mlFullDB_CV <- plotMLWithCIs(mlFullDB_CV, showRepCurves=TRUE, sizeAvgCurve=0.5, ciAlpha = 0.4, ciLevel = 0.99)
plots_mlFungiDecontam_CV <- plotMLWithCIs(mlFungiDecontam_CV, sizeAvgCurve=0.5, showRepCurves=TRUE, ciAlpha = 0.4, ciLevel = 0.99)
# Combine PR curves
plots_mlFullDB_CV$prPlot +
geom_path(data = do.call(rbind, plots_mlFungiDecontam_CV$prCurveData),aes(x=recall,y=precision), color = "purple", size = 0.5) +
geom_path(data = plots_mlFungiDecontam_CV$interpPRYDf_CI, aes(x = xval, y = Estimate), color = "red", size = 0.5) +
geom_ribbon(data = plots_mlFungiDecontam_CV$interpPRYDf_CI, aes(x = xval, ymin = CI.lower, ymax = CI.upper),
fill = "green", alpha = 0.3, inherit.aes = F)
# Combine PR curves
plots_mlFullDB_CV$prPlot +
geom_path(data = do.call(rbind, plots_mlFungiDecontam_CV$prCurveData),aes(x=recall,y=precision), color = "lightgray", size = 0.5) +
geom_path(data = plots_mlFungiDecontam_CV$interpPRYDf_CI, aes(x = xval, y = Estimate), color = "red", size = 0.5) +
geom_ribbon(data = plots_mlFungiDecontam_CV$interpPRYDf_CI, aes(x = xval, ymin = CI.lower, ymax = CI.upper),
fill = "green", alpha = 0.3, inherit.aes = F)
# Combine PR curves
plots_mlFungiDecontam_CV$prPlot +
geom_path(data = do.call(rbind, plots_mlFullDB_CV$prCurveData),aes(x=recall,y=precision), color = "purple", size = 0.5) +
geom_path(data = plots_mlFullDB_CV$interpPRYDf_CI, aes(x = xval, y = Estimate), color = "red", size = 0.5) +
geom_ribbon(data = plots_mlFullDB_CV$interpPRYDf_CI, aes(x = xval, ymin = CI.lower, ymax = CI.upper),
fill = "green", alpha = 0.3, inherit.aes = F)
save(mlFullDB_CV,
mlFungiDecontam_CV,
plots_mlFullDB_CV,
plots_mlFungiDecontam_CV,
file = "Interim_data/cristiano_CV10_overlay_data_and_plots_11Nov21.RData")
plots_mlFullDB_CV <- plotMLWithCIs(mlFullDB_CV, showRepCurves=TRUE, sizeAvgCurve=0.5, ciAlpha = 0.4, ciLevel = 0.99)
plots_mlFungiDecontam_CV <- plotMLWithCIs(mlFungiDecontam_CV, sizeAvgCurve=0.5, showRepCurves=TRUE, ciAlpha = 0.4, ciLevel = 0.99)
# Combine ROC curves
plots_mlFungiDecontam_CV$rocPlot +
geom_path(data = do.call(rbind, plots_mlFullDB_CV$rocCurveData),aes(x=fpr,y=tpr), color = "lightgray", size = 0.5) +
geom_path(data = plots_mlFullDB_CV$interpROCYDf_CI, aes(x = xval, y = Estimate), color = "red", size = 1) +
geom_ribbon(data = plots_mlFullDB_CV$interpROCYDf_CI, aes(x = xval, ymin = CI.lower, ymax = CI.upper),
fill = "green", alpha = 0.3, inherit.aes = F)
plots_mlFungiDecontam_CV$aurocCI
# Combine PR curves
plots_mlFungiDecontam_CV$prPlot +
geom_path(data = plots_mlFullDB_CV$prCurveData[[1]],aes(x=recall,y=precision), color = "purple", size = 0.5) +
geom_path(data = plots_mlFullDB_CV$interpPRYDf_CI, aes(x = xval, y = Estimate), color = "red", size = 0.5) +
geom_ribbon(data = plots_mlFullDB_CV$interpPRYDf_CI, aes(x = xval, ymin = CI.lower, ymax = CI.upper),
fill = "green", alpha = 0.3, inherit.aes = F)
# Combine PR curves
plots_mlFungiDecontam_CV$prPlot +
geom_path(data = plots_mlFullDB_CV$prCurveData[[2]],aes(x=recall,y=precision), color = "purple", size = 0.5) +
geom_path(data = plots_mlFullDB_CV$interpPRYDf_CI, aes(x = xval, y = Estimate), color = "red", size = 0.5) +
geom_ribbon(data = plots_mlFullDB_CV$interpPRYDf_CI, aes(x = xval, ymin = CI.lower, ymax = CI.upper),
fill = "green", alpha = 0.3, inherit.aes = F)
# Combine PR curves
plots_mlFungiDecontam_CV$prPlot +
geom_path(data = plots_mlFullDB_CV$prCurveData[[3]],aes(x=recall,y=precision), color = "purple", size = 0.5) +
geom_path(data = plots_mlFullDB_CV$interpPRYDf_CI, aes(x = xval, y = Estimate), color = "red", size = 0.5) +
geom_ribbon(data = plots_mlFullDB_CV$interpPRYDf_CI, aes(x = xval, ymin = CI.lower, ymax = CI.upper),
fill = "green", alpha = 0.3, inherit.aes = F)
# Combine PR curves
plots_mlFungiDecontam_CV$prPlot +
geom_path(data = plots_mlFullDB_CV$prCurveData[[4]],aes(x=recall,y=precision), color = "purple", size = 0.5) +
geom_path(data = plots_mlFullDB_CV$interpPRYDf_CI, aes(x = xval, y = Estimate), color = "red", size = 0.5) +
geom_ribbon(data = plots_mlFullDB_CV$interpPRYDf_CI, aes(x = xval, ymin = CI.lower, ymax = CI.upper),
fill = "green", alpha = 0.3, inherit.aes = F)
# Combine PR curves
plots_mlFungiDecontam_CV$prPlot +
geom_path(data = plots_mlFullDB_CV$prCurveData[[5]],aes(x=recall,y=precision), color = "purple", size = 0.5) +
geom_path(data = plots_mlFullDB_CV$interpPRYDf_CI, aes(x = xval, y = Estimate), color = "red", size = 0.5) +
geom_ribbon(data = plots_mlFullDB_CV$interpPRYDf_CI, aes(x = xval, ymin = CI.lower, ymax = CI.upper),
fill = "green", alpha = 0.3, inherit.aes = F)
# Combine PR curves
plots_mlFungiDecontam_CV$prPlot +
geom_path(data = plots_mlFullDB_CV$prCurveData[[6]],aes(x=recall,y=precision), color = "purple", size = 0.5) +
geom_path(data = plots_mlFullDB_CV$interpPRYDf_CI, aes(x = xval, y = Estimate), color = "red", size = 0.5) +
geom_ribbon(data = plots_mlFullDB_CV$interpPRYDf_CI, aes(x = xval, ymin = CI.lower, ymax = CI.upper),
fill = "green", alpha = 0.3, inherit.aes = F)
# Combine PR curves
plots_mlFungiDecontam_CV$prPlot +
geom_path(data = plots_mlFullDB_CV$prCurveData[[7]],aes(x=recall,y=precision), color = "purple", size = 0.5) +
geom_path(data = plots_mlFullDB_CV$interpPRYDf_CI, aes(x = xval, y = Estimate), color = "red", size = 0.5) +
geom_ribbon(data = plots_mlFullDB_CV$interpPRYDf_CI, aes(x = xval, ymin = CI.lower, ymax = CI.upper),
fill = "green", alpha = 0.3, inherit.aes = F)
# Combine PR curves
plots_mlFungiDecontam_CV$prPlot +
geom_path(data = plots_mlFullDB_CV$prCurveData[[8]],aes(x=recall,y=precision), color = "purple", size = 0.5) +
geom_path(data = plots_mlFullDB_CV$interpPRYDf_CI, aes(x = xval, y = Estimate), color = "red", size = 0.5) +
geom_ribbon(data = plots_mlFullDB_CV$interpPRYDf_CI, aes(x = xval, ymin = CI.lower, ymax = CI.upper),
fill = "green", alpha = 0.3, inherit.aes = F)
# Combine PR curves
plots_mlFungiDecontam_CV$prPlot +
geom_path(data = plots_mlFullDB_CV$prCurveData[[9]],aes(x=recall,y=precision), color = "purple", size = 0.5) +
geom_path(data = plots_mlFullDB_CV$interpPRYDf_CI, aes(x = xval, y = Estimate), color = "red", size = 0.5) +
geom_ribbon(data = plots_mlFullDB_CV$interpPRYDf_CI, aes(x = xval, ymin = CI.lower, ymax = CI.upper),
fill = "green", alpha = 0.3, inherit.aes = F)
# Combine PR curves
plots_mlFungiDecontam_CV$prPlot +
geom_path(data = plots_mlFullDB_CV$prCurveData[[10]],aes(x=recall,y=precision), color = "purple", size = 0.5) +
geom_path(data = plots_mlFullDB_CV$interpPRYDf_CI, aes(x = xval, y = Estimate), color = "red", size = 0.5) +
geom_ribbon(data = plots_mlFullDB_CV$interpPRYDf_CI, aes(x = xval, ymin = CI.lower, ymax = CI.upper),
fill = "green", alpha = 0.3, inherit.aes = F)
# Combine PR curves
p2 <- plots_mlFungiDecontam_CV$prPlot # +
for(ii in 1:10){
p2 <- p2 + geom_path(data = plots_mlFullDB_CV$prCurveData[[ii]],aes(x=recall,y=precision), color = "purple", size = 0.5)
}
p2 + geom_path(data = plots_mlFullDB_CV$interpPRYDf_CI, aes(x = xval, y = Estimate), color = "red", size = 0.5) +
geom_ribbon(data = plots_mlFullDB_CV$interpPRYDf_CI, aes(x = xval, ymin = CI.lower, ymax = CI.upper),
fill = "green", alpha = 0.3, inherit.aes = F)
# Combine PR curves
p2 <- plots_mlFungiDecontam_CV$prPlot # +
for(ii in 1:10){
p2 <- p2 + geom_path(data = plots_mlFullDB_CV$prCurveData[[ii]],aes(x=recall,y=precision), color = "lightgray", size = 0.5)
}
p2 + geom_path(data = plots_mlFullDB_CV$interpPRYDf_CI, aes(x = xval, y = Estimate), color = "red", size = 0.5) +
geom_ribbon(data = plots_mlFullDB_CV$interpPRYDf_CI, aes(x = xval, ymin = CI.lower, ymax = CI.upper),
fill = "green", alpha = 0.3, inherit.aes = F)
